// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: web_app.sql

package db

import (
	"context"
)

const addToCollection = `-- name: AddToCollection :exec
UPDATE web_apps
SET collection_id = $2::int
WHERE id IN (SELECT app_id FROM my_lists WHERE user_id = $1)
`

type AddToCollectionParams struct {
	UserID       int32
	CollectionID int32
}

func (q *Queries) AddToCollection(ctx context.Context, arg AddToCollectionParams) error {
	_, err := q.db.ExecContext(ctx, addToCollection, arg.UserID, arg.CollectionID)
	return err
}

const createWebApp = `-- name: CreateWebApp :one
INSERT INTO web_apps (name, url, image)
VALUES ($1, $2, $3)
RETURNING id, name, url, image, collection_id
`

type CreateWebAppParams struct {
	Name  string
	Url   string
	Image string
}

func (q *Queries) CreateWebApp(ctx context.Context, arg CreateWebAppParams) (WebApp, error) {
	row := q.db.QueryRowContext(ctx, createWebApp, arg.Name, arg.Url, arg.Image)
	var i WebApp
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Image,
		&i.CollectionID,
	)
	return i, err
}

const getByCollection = `-- name: GetByCollection :many
SELECT id, name, url, image, collection_id FROM web_apps
WHERE collection_id = $3::int
OFFSET $1
LIMIT $2
`

type GetByCollectionParams struct {
	Offset       int32
	Limit        int32
	CollectionID int32
}

func (q *Queries) GetByCollection(ctx context.Context, arg GetByCollectionParams) ([]WebApp, error) {
	rows, err := q.db.QueryContext(ctx, getByCollection, arg.Offset, arg.Limit, arg.CollectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebApp
	for rows.Next() {
		var i WebApp
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Image,
			&i.CollectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const takeCollection = `-- name: TakeCollection :exec
WITH new_app_ids AS (
    INSERT INTO web_apps (name, url, image)
    SELECT name, url, image FROM web_apps
    WHERE collection_id = $2::int
    RETURNING id
)
INSERT INTO my_lists (user_id, app_id)
SELECT $1::int, id FROM new_app_ids
`

type TakeCollectionParams struct {
	UserID       int32
	CollectionID int32
}

func (q *Queries) TakeCollection(ctx context.Context, arg TakeCollectionParams) error {
	_, err := q.db.ExecContext(ctx, takeCollection, arg.UserID, arg.CollectionID)
	return err
}
