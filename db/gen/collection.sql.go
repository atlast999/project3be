// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: collection.sql

package db

import (
	"context"
)

const createCollection = `-- name: CreateCollection :one
INSERT INTO collections (name, owner_id)
VALUES ($1, $2)
RETURNING id, name, owner_id
`

type CreateCollectionParams struct {
	Name    string `json:"name"`
	OwnerID int32  `json:"owner_id"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (Collection, error) {
	row := q.db.QueryRowContext(ctx, createCollection, arg.Name, arg.OwnerID)
	var i Collection
	err := row.Scan(&i.ID, &i.Name, &i.OwnerID)
	return i, err
}

const getCollections = `-- name: GetCollections :many
SELECT id, name, owner_id FROM collections
OFFSET $1
LIMIT $2
`

type GetCollectionsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetCollections(ctx context.Context, arg GetCollectionsParams) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, getCollections, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Collection{}
	for rows.Next() {
		var i Collection
		if err := rows.Scan(&i.ID, &i.Name, &i.OwnerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
